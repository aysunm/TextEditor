package texteditor;

import java.awt.*;
import java.io.*;
import java.util.*;
import java.util.List;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.text.*;
import javax.swing.text.Highlighter.Highlight;
import javax.swing.text.Highlighter.HighlightPainter;
import javax.swing.undo.*;

public class Program extends javax.swing.JFrame {

    Theme tema = null;
    File myFile = null;
    ArrayList<Theme> temalar = new ArrayList(); //COmboBox'tan seçim için tanımlamak gerekli            
    ArrayList<Font> fontlar = new ArrayList();
    ArrayList<Emphasis> emphasisler = new ArrayList();
    ArrayList<FontSize> sizelar = new ArrayList();
    Iterator findIterator = null;
    int lastFindIndex = -0; //iteratorde kelime bulma işlemlerinde lazım olacak
    String sonAranan = "";
    UndoManager undoManager;

    
    public Program() {
    
        initComponents();
        comboBoxDoldur();
        undoManager = new UndoManager();
        jTextArea1.getDocument().addUndoableEditListener(new UndoableEditListener() {
        @Override
        public void undoableEditHappened(UndoableEditEvent e) { //hazır java sınıfını kullanarak undo işlemini gerçekleştiriyoruz.
                undoManager.addEdit(e.getEdit());
        }});
        
        tema = new WhiteTheme(new TimesNewRomanFont(), null, null); //program ilk açıldığında asıl görmek istediğimizi veriyoruz
        tema.setTextArea(jTextArea1);
        tema.update();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        yeniDosya = new javax.swing.JButton();
        dosyaAc = new javax.swing.JButton();
        dosyayiKaydet = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        kelimeBul = new javax.swing.JButton();
        temajComboBox = new javax.swing.JComboBox<>();
        temaSec = new javax.swing.JButton();
        fontjComboBox = new javax.swing.JComboBox<>();
        emphasisComboBox = new javax.swing.JComboBox<>();
        fontSec = new javax.swing.JButton();
        emphasisSec = new javax.swing.JButton();
        sizejComboBox = new javax.swing.JComboBox<>();
        sizeSec = new javax.swing.JButton();
        solaHizala = new javax.swing.JButton();
        sagaHizala = new javax.swing.JButton();
        geriAl = new javax.swing.JButton();
        ileriAl = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        yeniDosya.setText("Yeni Dosya");
        yeniDosya.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yeniDosyaActionPerformed(evt);
            }
        });

        dosyaAc.setText("Dosya Aç");
        dosyaAc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dosyaAcActionPerformed(evt);
            }
        });

        dosyayiKaydet.setText("Dosyayı Kaydet");
        dosyayiKaydet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dosyayiKaydetActionPerformed(evt);
            }
        });

        jLabel1.setText("Aranacak Kelime");

        jLabel2.setText("Yerine Yazılacak Kelime");

        kelimeBul.setText("Bul ve Değiştir");
        kelimeBul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kelimeBulActionPerformed(evt);
            }
        });

        temaSec.setText("Tema Seç");
        temaSec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temaSecActionPerformed(evt);
            }
        });

        fontSec.setText("Font Seç");
        fontSec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontSecActionPerformed(evt);
            }
        });

        emphasisSec.setText("Emphasis Seç");
        emphasisSec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emphasisSecActionPerformed(evt);
            }
        });

        sizeSec.setText("Size Seç");
        sizeSec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeSecActionPerformed(evt);
            }
        });

        solaHizala.setText("Sola Hizala");
        solaHizala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solaHizalaActionPerformed(evt);
            }
        });

        sagaHizala.setText("Sağa Hizala");
        sagaHizala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sagaHizalaActionPerformed(evt);
            }
        });

        geriAl.setText("Geri Al");
        geriAl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geriAlActionPerformed(evt);
            }
        });

        ileriAl.setText("İleri Al");
        ileriAl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ileriAlActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(sizejComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fontjComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(yeniDosya, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(temajComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(emphasisComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sizeSec, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(emphasisSec, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ileriAl))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(fontSec, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(solaHizala)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sagaHizala)
                                    .addComponent(geriAl))
                                .addGap(132, 132, 132))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(temaSec, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(338, 338, 338))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(dosyaAc)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dosyayiKaydet)
                                        .addGap(22, 22, 22)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addComponent(kelimeBul, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(16, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(yeniDosya, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dosyaAc, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dosyayiKaydet, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 15, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 9, Short.MAX_VALUE)
                                .addComponent(kelimeBul, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(temajComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(temaSec))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fontjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fontSec)
                            .addComponent(solaHizala)
                            .addComponent(sagaHizala))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emphasisSec)
                            .addComponent(emphasisComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ileriAl)
                            .addComponent(geriAl)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sizejComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sizeSec))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dosyaAcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dosyaAcActionPerformed
        JFileChooser fileChooser = new JFileChooser(); //hazır java sınıfından yararlanarak arayüzden dosya seçtiriyoruz.
        fileChooser.showOpenDialog(dosyaAc);        
        myFile = fileChooser.getSelectedFile();
        
        OpenFileCommand openCmd = new OpenFileCommand(myFile);
        tema.executeCommand(openCmd);
    }//GEN-LAST:event_dosyaAcActionPerformed

    private void yeniDosyaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yeniDosyaActionPerformed
        if (myFile != null) //önceden bir dosya açıldıysa
        {
            int input = JOptionPane.showConfirmDialog(null, myFile.getName() + " dosyasi henuz kaydedilmedi. Kaydetmek ister misiniz?", 
                    "Not defteri", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            
            if (input == JOptionPane.CANCEL_OPTION)
            {
                return;
            }
            else if (input == JOptionPane.YES_OPTION)
            {
                dosyayiKaydetActionPerformed(evt);
            }
        }
        else
        {
            if (!tema.getJTextArea().getText().equals("")) //textarea boş değilse
            {
                int input = JOptionPane.showConfirmDialog(null, "Adsız dosyasi henuz kaydedilmedi. Kaydetmek ister misiniz?", 
                    "Not defteri", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            
                if (input == JOptionPane.CANCEL_OPTION)
                {
                    return;
                }
                else if (input == JOptionPane.YES_OPTION)
                {
                    dosyayiKaydetActionPerformed(evt);
                }
            }
        }
        
        myFile = null;
        tema.getJTextArea().setText(""); //sayfa clear
    }//GEN-LAST:event_yeniDosyaActionPerformed

    private void dosyayiKaydetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dosyayiKaydetActionPerformed
        if (myFile == null)
        {
            try
            {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
                fileChooser.showOpenDialog(dosyayiKaydet);

                myFile = fileChooser.getSelectedFile();
                if (myFile.exists())
                {
                    int result = JOptionPane.showConfirmDialog(null, myFile.getAbsolutePath() + " zaten var, üstüne yazmak ister misiniz?", "Not defteri",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                    if (result == JOptionPane.YES_OPTION)
                    {
                        myFile.delete();
                        myFile.createNewFile();
                    }
                    else if (result == JOptionPane.NO_OPTION)
                    {
                        return;
                    }
                }
                else
                {
                    myFile.createNewFile();
                }
            }
            catch (IOException ex)
            {
                return;
            }
        }
        SaveFileCommand saveCmd = new SaveFileCommand(myFile); //command ile dosyayı kaydetme işlemi
        tema.executeCommand(saveCmd);
    }//GEN-LAST:event_dosyayiKaydetActionPerformed

    private void kelimeBulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kelimeBulActionPerformed
        String haystack = jTextArea1.getText();
        String needle = jTextField1.getText();
        if (findIterator == null || !sonAranan.equals(needle))
        {
            List<String> collection = Arrays.asList(haystack.split("\\s+")); //metni kelimelerine böl
            findIterator = collection.iterator(); //iterator olustur
            sonAranan = needle;
            Highlighter hl = jTextArea1.getHighlighter();
            hl.removeAllHighlights();
        }
        
        while (findIterator.hasNext()) //sıradaki aranan bulunana kadar dön
        {
            String s = (String)findIterator.next();
            if (s.contains(needle)) //bir sonraki kelime arananı içeriyor mu kontrol et
            {
                try {
                    lastFindIndex = haystack.indexOf(s, lastFindIndex);
                    
                    Highlighter hl = jTextArea1.getHighlighter();
                    
                    Highlight[] hls = hl.getHighlights();
                    
                    if (hls.length > 0)
                    {
                        int start = hls[0].getStartOffset();
                        int end = hls[0].getEndOffset();
                        
                        String part1 = haystack.substring(0, start);
                        String part2 = haystack.substring(end, haystack.length());
                        
                        haystack = part1 + jTextField2.getText() + part2; //arananı istenilen ile değiştir
                        jTextArea1.setText(haystack);
                        lastFindIndex += jTextField2.getText().length() - needle.length();
                    }
                    
                    hl.removeAllHighlights();
                    HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.cyan);
                    hl.addHighlight(lastFindIndex, lastFindIndex + needle.length(), painter);
                    
                    lastFindIndex += s.length();
                } catch (BadLocationException ex) {
                    System.out.println(ex);
                }
                return; //bir tane bulduysam highligthlayıp burada kes
            }
        }
        
        if (!findIterator.hasNext()) //aranan artık bulunamıyorsa
        {
            Highlighter hl = jTextArea1.getHighlighter();
            Highlight[] hls = hl.getHighlights();
                    
            if (hls.length > 0) //son bir tane önceden highlight yaptıysak
            {
                int start = hls[0].getStartOffset();
                int end = hls[0].getEndOffset();
                        
                String part1 = haystack.substring(0, start);
                String part2 = haystack.substring(end, haystack.length());
                                        
                haystack = part1 + jTextField2.getText() + part2; //sonuncu bulunanı değiştir
                jTextArea1.setText(haystack);
                lastFindIndex += jTextField2.getText().length() - needle.length();
                
                hl.removeAllHighlights();
                
                return; //değiştirdikten sonra kes
            }

            JOptionPane.showMessageDialog(jTextArea1, needle + " bulunamıyor"); //artık bulunamıyor
            findIterator = null; //bir sonraki arama için iteratoru temizle
            lastFindIndex = 0;
        }
    }//GEN-LAST:event_kelimeBulActionPerformed

    private void solaHizalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solaHizalaActionPerformed
        jTextArea1.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
    }//GEN-LAST:event_solaHizalaActionPerformed

    private void sagaHizalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sagaHizalaActionPerformed
        jTextArea1.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
    }//GEN-LAST:event_sagaHizalaActionPerformed

    private void temaSecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temaSecActionPerformed
        String temaSelected = temajComboBox.getSelectedItem().toString(); //combobox'tan secileni al
        for (int i = 0; i < temalar.size(); i++)
        {
            if (temaSelected.equals(temalar.get(i).toString())) //seçilen temayı bul
            {
                tema = temalar.get(i);
                tema.revertToDefault();
                tema.setTextArea(jTextArea1);
                tema.update(); //textareayı güncelle
                
                Font font = tema.getFont();
                FontSize fsize = tema.getFontSize();
                Emphasis emp = tema.getEmphasis();
                
                fontjComboBox.setSelectedItem(font.toString());
                if (emp == null)
                {
                    emphasisComboBox.setSelectedIndex(0);
                }
                else
                {
                    emphasisComboBox.setSelectedItem(emp.toString());
                }
                sizejComboBox.setSelectedItem(fsize.toString());
                
                return;
            }
        }  
    }//GEN-LAST:event_temaSecActionPerformed

    private void fontSecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontSecActionPerformed
        String fontSelected = fontjComboBox.getSelectedItem().toString();
        for (int i = 0; i < fontlar.size(); i++)
        {
            if (fontSelected.equals(fontlar.get(i).toString()))
            {
                Font font = fontlar.get(i);
                tema.setFont(font);
                tema.setTextArea(jTextArea1);
                tema.update();
                return;
            }
        }      
    }//GEN-LAST:event_fontSecActionPerformed

    private void emphasisSecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emphasisSecActionPerformed
        String emphasisSelected = emphasisComboBox.getSelectedItem().toString();
        if(emphasisSelected.equals("Vurgu Yok"))
        {
            tema.setEmphasis(null);
            tema.setTextArea(jTextArea1);
            tema.update();
            return;
        }
        for (int i = 0; i < emphasisler.size(); i++)
        {
            if (emphasisSelected.equals(emphasisler.get(i).toString()))
            {
                Emphasis emphasis = emphasisler.get(i);
                tema.setEmphasis(emphasis);
                tema.setTextArea(jTextArea1);
                tema.update();
                return;
            }
        } 
    }//GEN-LAST:event_emphasisSecActionPerformed

    private void sizeSecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeSecActionPerformed
        String sizeSelected = sizejComboBox.getSelectedItem().toString();
        
        for (int i = 0; i < sizelar.size(); i++)
        {
            if (sizeSelected.equals(sizelar.get(i).toString()))
            {
                FontSize size = sizelar.get(i);
                tema.setFontSize(size);
                tema.setTextArea(jTextArea1);
                tema.update();
                return;
            }
        } 
    }//GEN-LAST:event_sizeSecActionPerformed

    private void geriAlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geriAlActionPerformed
        if (!undoManager.canUndo())
            return;
        UndoCommand undoCmd = new UndoCommand(undoManager);
        tema.executeCommand(undoCmd);
    }//GEN-LAST:event_geriAlActionPerformed

    private void ileriAlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ileriAlActionPerformed
        RedoCommand redoCmd = new RedoCommand(undoManager);
        tema.executeCommand(redoCmd);
    }//GEN-LAST:event_ileriAlActionPerformed
    
    public void comboBoxDoldur()
    {
        temalar.add(new WhiteTheme(new ArialFont(), null, null));
        temalar.add(new BlackTheme(new TimesNewRomanFont(), null, null)); //temaları arraye ekle
        temajComboBox.addItem((temalar.get(0).toString())); //arrayi comboboxa ekle
        temajComboBox.addItem((temalar.get(1).toString()));
            
        fontlar.add(new ArialFont());
        fontlar.add(new TimesNewRomanFont());
        fontjComboBox.addItem((fontlar.get(0).toString()));
        fontjComboBox.addItem((fontlar.get(1).toString()));
        
        emphasisler.add(new BoldEmphasis());
        emphasisler.add(new ItalicEmphasis());
        emphasisler.add(new BoldItalicEmphasis());
        emphasisComboBox.addItem("Vurgu Yok");
        emphasisComboBox.addItem((emphasisler.get(0).toString()));
        emphasisComboBox.addItem((emphasisler.get(1).toString()));
        emphasisComboBox.addItem((emphasisler.get(2).toString()));
            
        sizelar.add(new SmallFontSize());
        sizelar.add(new MediumFontSize());
        sizelar.add(new LargeFontSize());
        sizejComboBox.addItem((sizelar.get(0).toString()));
        sizejComboBox.addItem((sizelar.get(1).toString()));
        sizejComboBox.addItem((sizelar.get(2).toString()));
        sizejComboBox.setSelectedIndex(1);
    }


    public static void main(String args[]) 
    {    
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() 
            {
                new Program().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dosyaAc;
    private javax.swing.JButton dosyayiKaydet;
    private javax.swing.JComboBox<String> emphasisComboBox;
    private javax.swing.JButton emphasisSec;
    private javax.swing.JButton fontSec;
    private javax.swing.JComboBox<String> fontjComboBox;
    private javax.swing.JButton geriAl;
    private javax.swing.JButton ileriAl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton kelimeBul;
    private javax.swing.JButton sagaHizala;
    private javax.swing.JButton sizeSec;
    private javax.swing.JComboBox<String> sizejComboBox;
    private javax.swing.JButton solaHizala;
    private javax.swing.JButton temaSec;
    private javax.swing.JComboBox<String> temajComboBox;
    private javax.swing.JButton yeniDosya;
    // End of variables declaration//GEN-END:variables
}
